# This file doesn't actually do anything by itself.
# It simply contains all the FQL server-side query calls needed to set up the FDB database.

# Index for finding a user by their email address. Used for logging in.
CreateIndex({
  name: "users_by_email",
  unique: true,
  serialized: true,
  source: "users",
  terms: [ { field: ["data", "email"] } ],
})

# Index for finding pages by their path.
CreateIndex({
  name: "pages_by_path",
  unique: true,
  serialized: true,
  source: Collection("pages"),
  terms: [{ field: ["data", "path"] }],
  values: [
    { field: ["ref"] },
    { field: ["data", "path"] }
  ]
})

CreateFunction({
  name: "page_proc_path",
  body: Query(Lambda(
    "path",
    Let({ path_cleaned: LowerCase(Trim(Var("path"))) },
      If(ContainsStrRegex(Var("path_cleaned"),
        "^\\w+$"
      ), Var("path_cleaned"), Abort("400"))
    )
  )),
  role: "server"
})

CreateFunction({
  name: "create_page",
  body: Query(Lambda(
    ["type", "name", "lang"],
    Let({
      type_proc: Call(Function("page_proc_path"), Var("type")),
      name_proc: Call(Function("page_proc_path"), Var("name")),
      fullpath: Concat(["/", Var("type_proc"), "/", Var("name_proc")], "")
      },
      If(Exists(Match(Index("pages_by_path"), Var("fullpath"))),
        Abort("409"),
        Let({
          user: CurrentIdentity(),
          time: Now(),
          page: Select("ref", Create(Collection("pages"), {
            data: {
              version: 1,
              path: Var("fullpath"),
              authors: [Var("user")],
              metadata: {
                type: Var("type_proc"),
                flags: [],
                attributes: [],
                warnings: [],
                context: "foundation",
                canons: [],
                tags: []
              },
              history: {
                revision: 1,
                created: Var("time"),
                lastEdited: Var("time"),
                lastAuthor: Var("user")
              },
              locals: ToObject([[Var("lang"), {
                title: "",
                subtitle: "",
                description: "",
                template: ""
              }]])
            }
          })),
          social: Select("ref", Create(Collection("page_socials"), {
            data: {
              ratings: {
                up: [],
                meh: [],
                down: []
              },
              comments: []
            }
          }))
        },
        Do(
          Update(Var("page"), { data: {
            social: Var("social")
          }}),
          Update(Var("social"), { data: {
            page: Var("page")
          }}),
          Var("page")
        ))
      )
    )
  )),
  role: "server"
})

# fn: (Ref[]) => Social[] // same order
# fn: (Ref) => Social // overload
CreateFunction({
  name: "socials_of",
  body: Query(Lambda(
    "user_refs",
    If(IsArray(Var("user_refs")),
      Map(Var("user_refs"), Lambda("user_ref",
        If(Exists(Var("user_ref")),
          Select("data", Get(Select(["data", "social"], Get(Var("user_ref"))))),
          null
        ))
      ),
      If(Exists(Var("user_refs")),
        Select("data", Get(Select(["data", "social"], Get(Var("user_refs"))))),
        null
      )
    )
  )),
  role: "server"
})

# Emails are treated as case insensitive by uppercasing them.
CreateFunction({
  name: "validate_email",
  body: Query(Lambda(
    "email",
    ContainsStrRegex(
      UpperCase(Trim(Var("email"))),
      "^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$"
    )
  )),
  role: "server"
})

# FaunaDB function to validate (constrain) passwords.
# Password is allowed to be a string between 6-32 characters long.
# It must only consist of only characters matching the `\S` control character.
# An exception is that space is allowed in order to allow pass phrases.
# Redundant spaces on the left or right side of the string are trimmed.
# This should HOPEFULLY allow people who aren"t using English keyboards to use their own alphabet.
CreateFunction({
  name: "validate_password",
  body: Query(Lambda(
    "password",
    ContainsStrRegex(
      Trim(Var("password")),
      "^[\\S ]{6,32}$"
    )
  )),
  role: "server"
})

CreateFunction({
  name: "auth_register",
  body: Query(Lambda(
    ["email", "password"],
    If(Call(Function("validate_email"), Var("email")),
      If(Call(Function("validate_password"), Var("password")),
        If(Exists(Match(Index("users_by_email"), Var("email"))),
          Abort("This email address has already been used."),
          Let(
            {
              user: Select("ref", Create(
                Collection("users"),
                {
                  credentials: { password: Var("password") },
                  data: {
                    email: Var("email"),
                    validated: false
                  }
                }
              )),
              social: Select("ref", Create(
                Collection("socials"),
                {
                  data: {
                    authorpage: "",
                    nickname: "Unnamed User",
                    tagline: "",
                    bio: ""
                  }
                }
              ))
            },
            Do(
              Update(Var("user"), { data: {
                social: Var("social")
              }}),
              Update(Var("social"), { data: {
                user: Var("user")
              }}),
              Get(Var("user"))
            )
          )
        ),
        Abort("Password is either using invalid characters or has an invalid length.")
      ),
      Abort("Provided email does not appear to be a valid email address.")
    )
  )),
  role: "server"
})

CreateFunction({
  name: "auth_login",
  body: Query(Lambda(
    ["email", "password", "remember"],
    Let({
        match: Match(Index("users_by_email"), Var("email")),
        user: If(IsNonEmpty(Var("match")),
          Login(Var("match"), { password: Var("password"), ttl: TimeAdd(Now(), 1, "day") }),
          Abort("401")
        ),
        session: If(Var("remember"),
          Create(Tokens(), {
            ttl: TimeAdd(Now(), 7, "day"),
            instance: Select("ref", Create(Collection("sessions"), {
              ttl: TimeAdd(Now(), 7, "day"),
              data: { user: Select("ref", Get(Var("match"))) }
            }))
          }),
          null
        )
      },
      { user: Var("user"), session: Var("session")  }
    )
  )),
  role: "server"
})

# Handles automatically logging in when using "Remember Me".
CreateFunction({
  name: "auth_login_auto",
  body: Query(Lambda(
    ["id", "secret"],
    Let({ ref: Ref(Collection("sessions"), Var("id")) },
      If(Exists(Var("ref")),
        Let({
            token: KeyFromSecret(Var("secret")),
            session: Get(Var("ref"))
          },
          Do(
            If(Equals(Select("instance", Var("token")), Var("ref")), null, Abort("401")),
            Update(Select("ref", Var("token")), { ttl: TimeAdd(Now(), 7, "day") }),
            Update(Var("ref"), { ttl: TimeAdd(Now(), 7, "day") }),
            Create(Tokens(), {
              ttl: TimeAdd(Now(), 1, "day"),
              instance: Select(["data", "user"], Var("session"))
            })
          )
        ),
        false
      )
    )
  )),
  role: "server"
})

CreateFunction({
  name: "auth_end_session",
  body: Query(Lambda(
    ["id", "secret"],
    Let({ ref: Ref(Collection("sessions"), Var("id")) },
      If(Exists(Var("ref")),
        Let({ token: KeyFromSecret(Var("secret")) },
          Do(
            If(Equals(Select("instance", Var("token")), Var("ref")), null, Abort("401")),
            Delete(Select("ref", Var("token"))),
            Delete(Var("ref")),
            true
          )
        ),
        false
      )
    )
  )),
  role: "server"
})
