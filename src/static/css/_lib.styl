// Disable some Stylus stuff
vendors = official

// Helpers
ensure(val, type)
  if val is a 'boolean' and type isnt defined and val is false
    error('Expected conditional to evaluate to true but got false')
  unless val is a type
    error('expected a ' + type + ', but got ' + typeof(val))

// Calc Helpers (used for colvar mainly)

calc-mix(var1, var2, ratio = 0.5)
  if unit(ratio) is '%'
    ratio = unit(ratio,'') / 100
  if ratio = 0.5
    return 'calc((%s + %s) / 2)' % (var1 var2)
  else
    return 'calc((%s * %s) + (%s * %s))' % (var1 (1 - ratio) var2 ratio)

calc-op(op, vars...)
  if length(vars) < 2
    return vars[0]

  str = 'calc(%s)' % unquote(join(' ' + op + ' ', vars))
  return str

// Color

// TODO: add shade function (lighten desaturates, darken saturates)

colvar(name, functions...)
  // Return combined (simple) hsla variable if no functions are used
  unless functions
    return 'var(--cvhsla-%s)' % unquote(name)

  // Functions are used, so we need to use the more verbose variables
  hue        = colvar-component(name, 'h')
  saturation = colvar-component(name, 's')
  lightness  = colvar-component(name, 'l')
  alpha      = colvar-component(name, 'a')

  for keys in functions
    parameters = clone(keys)
    function = shift(parameters)

    if function is lighten
      val = parameters[0]
      if unit(val) is '%'
        lightness = calc-op('+', lightness, val)
      else if unit(val) is ''
        lightness = calc-op('*', lightness, val)

    if function is darken
      val = parameters[0]
      if unit(val) is '%'
        lightness = calc-op('-', lightness, val)
      else if unit(val) is ''
        lightness = calc-op('/', lightness, val)

    if function is saturate
      val = parameters[0]
      if unit(val) is '%'
        saturation = calc-op('+', saturation, val)
      else if unit(val) is ''
        saturation = calc-op('*', saturation, val)

    if function is desaturate
      val = parameters[0]
      if unit(val) is '%'
        saturation = calc-op('-', saturation, val)
      else if unit(val) is ''
        saturation = calc-op('/', saturation, val)

    if function is opacity or function is alpha
      alpha = parameters[0]

    if function is mix
      othercolor = colvar-shred(parameters[0])
      mix = 0.5
      mix = parameters[1] if parameters[1]

      hue        = calc-mix(hue, othercolor[0], mix)
      saturation = calc-mix(saturation, othercolor[1], mix)
      lightness  = calc-mix(lightness, othercolor[2], mix)
      alpha      = calc-mix(alpha, othercolor[3], mix)

  return 'hsla(%s, %s, %s, %s)' % (hue saturation lightness alpha)


colvar-set(name, val)
  name = unquote(name)
  hue        = round(hue(val),2)
  saturation = round(saturation(val),2)
  lightness  = round(lightness(val),2)
  alpha      = round(alpha(val),2)
  --cvh-{name}: hue
  --cvs-{name}: saturation
  --cvl-{name}: lightness
  --cva-{name}: alpha
  // Combined variable for when functions aren't used to adjust the color
  --cvhsla-{name}: 'hsla(%s, %s, %s, %s)' % (hue saturation lightness alpha)

colvar-component(name, type)
  name = unquote(name)

  unless type is a 'string'
    type = type + ''

  component = ''
  if type is 'h' or type is 'hue'
    component = h
  if type is 's' or type is 'saturation'
    component = s
  if type is 'l' or type is 'lightness'
    component = l
  if type is 'a' or type is 'alpha'
    component = a

  return 'var(--cv%s-%s)' % (component name)

colvar-shred(identifier)
  if type(identifier) is 'hsla'
    hue        = hue(identifier)
    saturation = saturation(identifier)
    lightness  = lightness(identifier)
    alpha      = alpha(identifier)
    return (hue saturation lightness alpha)
  else if identifier
    hue        = 'var(--cvh-%s)' % identifier
    saturation = 'var(--cvs-%s)' % identifier
    lightness  = 'var(--cvl-%s)' % identifier
    alpha      = 'var(--cva-%s)' % identifier
    return (hue saturation lightness alpha)

// Property Functions

// Font automagic setter
font-set(font, useCache = true)
  font-setter()
    --font-cap: unquote('var(--font-' + font + '-cap)')
    font-family: unquote('var(--font-' + font + ')')
    if font is 'mono' or font is mono
      letter-spacing: -0.05em
      word-spacing: -0.05em
      overflow-wrap: break-word
  if useCache
    +cache('font-' + font)
      font-setter()
  else
    font-setter()

// Stylus unfortunately, like most preprocessors, does not support the [rgba(triplet, opacity)] syntax.
// This is a simple replacement for that functionality.
vgba(triplet, opacity)
  'rgba(%s, %s)' % (triplet opacity)

// Properties

// Terminal style text.
terminal-text(col = white)
  color: transparent
  text-shadow: 0 0 5px rgba(col, 0.5)
  background: linear-gradient(rgba(18, 16, 16, 0) 50%, rgba(0, 0, 0, 0.25) 50%), col
  background-size: 100% 2px
  background-clip: text

// Makes an object appear higher.
shadow-elevation(height = 1, boost = 1)
  boost = (boost * (unit(height,'') / 8))
  height = unit(height, '')px
  unless unit(height, '') is 0
    box-shadow: 0 (height / 2) height 0 rgba(black, 0.5 * boost),
                0 0 0 (0.075px * height) (rgba(black, 0.1 * boost))
  if unit(height, '') is 0
    box-shadow: none

// Adds scroll shadows. Requires usage of backgrounds.
scroll-shadows(boost = 1, extent = 1, background = colvar('background'))
  background: linear-gradient(background 33%, transparent),
              linear-gradient(transparent, background 66%) 0 100%,
              radial-gradient(farthest-side at 50% 0, shadow, rgba(0,0,0,0)),
              radial-gradient(farthest-side at 50% 100%, shadow, rgba(0,0,0,0)) 0 100%
  background-repeat: no-repeat
  background-size: 100% extent1, 100% extent1, 100% extent2, 100% extent2
  background-attachment: local, local, scroll, scroll
  alphaval = 0.5 * boost
  shadow = rgba(30, 30, 30, alphaval)
  extent1 = 30px * extent
  extent2 = 10px * extent

// Grid-Kiss Hilarious Stylus Fork
use('grid-kiss-stylus/grid-kiss.js')
grid-kiss()
  display: grid

  list = grid-kiss-list(arguments)

  props = 'align-content', 'justify-content',
          'grid-template-rows', 'grid-template-columns', 'grid-template-areas'
  propvals = list[0]
  for val, i in propvals
    prop = props[i]
    add-property(prop, val) if val

  grid-kiss-zone(zone)
    {zone[0]}
      props = '', 'grid-area', 'justify-self', 'align-self'
      for val, i in zone
        unless i is 0
          prop = props[i]
          add-property(prop, val) if val

  zones = list[1]
  if zones
    if length(slice(zones[1], 0, 1)) isnt 1
      for zone in zones
        grid-kiss-zone(zone)
    else
      grid-kiss-zone(zones)

// Misc. Block Functions

overlay()
  position: relative unless @position
  &::after
    position: absolute
    top: 0
    left: 0
    z-index: 1
    width: 100%
    height: 100%
    content: ''
    pointer-events: none
    {block}

// Selection Functions

// This is just a helper function to select all headings. Because that's always REALLY annoying.
select-headings(prefix = '', suffix = '')
  headings = ()
  for num in (1..6)
    push(headings, prefix + 'h' + num + suffix)

  return join(', ', headings)

// This lets select tags from: a list of strings, a string that is a list, or a pure list
// The prefix lets you use a combinator (say '> ') on your tags.
select-listed(prefix = '', selectors...)
  // We'll convert anything provided to a string for safety
  // This lets you provide the selectors in either args = '1, 2, 3' or args = 1, 2, 3
  selector = join(', ', selectors)
  & {prefix}
    {selector}
      {block}

// Media Functions

// +match-media(size, inclusivity)
// size: any-in: ['narrow', 'thin', 'small', 'normal', 'wide']
// inclusivity: any-in: ['only', 'up', 'below']
// Sizes, by default, will match like so:
//    narrow: < 400px (small phones)
//    thin:   > 400px (normal phones)
//    small:  < 800px (tablets)
//    normal: > 1000px (average desktop)
//    wide:   > 1400px (extra wide monitors)
use('match-media.js')
match-media(size, inclusivity)
  $s = match-media-string(size, inclusivity)
  @media $s
    {block}

// +has-only-touch()
// For touch devices - regardless of size.
// Any features where you intend it to be for 'mobile' should probably use this instead.
// The exception is for the 'size' of readable content.
// Making things easier to read should be based off screen size.
has-only-touch()
  @media (pointer: coarse)
    {block}

has-only-hover()
  @media (pointer: fine)
    {block}

// +uses-reduced-motion()
// Reduced motion accessibility
// Probably not needed but it's just more consistent with how the rest of the media queries are done
uses-reduced-motion()
  @media (prefers-reduced-motion)
    {block}

// +onHover()
// Shoves hover stuff in a hover media query
on-hover(notWithActive = true)
  @media (any-hover: hover), (hover: hover)
    if notWithActive
      &:hover:not(:active)
        {block}
    else
      &:hover
        {block}

// Mixins

// hide-scrollbars()
// Gets rid of scrollbars, but allows scrolling.
hide-scrollbars()
  scrollbar-width: none
  &::-webkit-scrollbar
    display: none

// hide-visually()
// Hides content visually but not to screen readers.
hide-visually()
  position: absolute
  width: 1px
  height: 1px
  overflow: hidden
  white-space: nowrap
  clip: rect(1px, 1px, 1px, 1px)
  clip-path: inset(100%)

// Adds ::after and ::before pseudo-elements labeling the element for screen-readers.
// Like such: &::before = '[Start of $text]', &::after = '[End of $text]'
label-for-screenreaders(text)
  &::before,
  &::after
    hide-visually()

  &::before
    content: '[Start of ' + text + '.]'

  &::after
    content: '[End of ' + text + '.]'

// Resets

reset-styling(useCache = true)
  resetter()
    color: inherit
    font: inherit
    text-decoration: none
    background: none
    &:not(:focus-visible)
      border: none
      outline: none
  if useCache
    +cache('reset-styling')
      resetter()
  else
    resetter()
